
Lions.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000270  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000990  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000869  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035b  00000000  00000000  00001521  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  0000187c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043f  00000000  00000000  00001944  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d1  00000000  00000000  00001d83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001f54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	a4 c0       	rjmp	.+328    	; 0x15e <__vector_5>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a8 30       	cpi	r26, 0x08	; 8
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	a1 d0       	rcall	.+322    	; 0x1ec <main>
  aa:	a6 c0       	rjmp	.+332    	; 0x1f8 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <wild>:
int counter = 0;
volatile uint8_t prev_states[4];
uint8_t legalMove1;
uint8_t legalMove2;
void wild(){
	counter++;
  ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  c0:	08 95       	ret

000000c2 <den>:
}
void den(){
	counter--;
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  d4:	08 95       	ret

000000d6 <sensor_init>:
}
void sensor_init(){
	legalMove2 = 0b00101101;
  d6:	8d e2       	ldi	r24, 0x2D	; 45
  d8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <legalMove2>
	legalMove1 = 0b00011110;
  dc:	8e e1       	ldi	r24, 0x1E	; 30
  de:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <legalMove1>
	for(int i = 1; i < 4; i++){
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	05 c0       	rjmp	.+10     	; 0xf2 <sensor_init+0x1c>
		prev_states[i] = 0;
  e8:	fc 01       	movw	r30, r24
  ea:	ed 5f       	subi	r30, 0xFD	; 253
  ec:	fe 4f       	sbci	r31, 0xFE	; 254
  ee:	10 82       	st	Z, r1
	counter--;
}
void sensor_init(){
	legalMove2 = 0b00101101;
	legalMove1 = 0b00011110;
	for(int i = 1; i < 4; i++){
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	84 30       	cpi	r24, 0x04	; 4
  f4:	91 05       	cpc	r25, r1
  f6:	c4 f3       	brlt	.-16     	; 0xe8 <sensor_init+0x12>
		prev_states[i] = 0;
	}
	DDRC |= 0x0f;
  f8:	87 b1       	in	r24, 0x07	; 7
  fa:	8f 60       	ori	r24, 0x0F	; 15
  fc:	87 b9       	out	0x07, r24	; 7
	PCICR |= (1 << PCIE1);     // set PCIE1 to enable PCMSK1 scan
  fe:	e8 e6       	ldi	r30, 0x68	; 104
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	82 60       	ori	r24, 0x02	; 2
 106:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PINC6) || (1<<PINC7);   // set pin C 6 & 7 to trigger an interrupt on state change
 108:	ec e6       	ldi	r30, 0x6C	; 108
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	80 83       	st	Z, r24
	sei();
 112:	78 94       	sei
 114:	08 95       	ret

00000116 <check_eligibility>:
}
int check_eligibility(){
 116:	cf 93       	push	r28
	uint8_t temp = 0;
	for(int i = 0; i < 4; i++){
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	30 e0       	ldi	r19, 0x00	; 0
	PCICR |= (1 << PCIE1);     // set PCIE1 to enable PCMSK1 scan
	PCMSK1 |= (1 << PINC6) || (1<<PINC7);   // set pin C 6 & 7 to trigger an interrupt on state change
	sei();
}
int check_eligibility(){
	uint8_t temp = 0;
 11c:	c0 e0       	ldi	r28, 0x00	; 0
	for(int i = 0; i < 4; i++){
 11e:	10 c0       	rjmp	.+32     	; 0x140 <check_eligibility+0x2a>
		temp |= (prev_states[i] >> (2*i));
 120:	f9 01       	movw	r30, r18
 122:	ed 5f       	subi	r30, 0xFD	; 253
 124:	fe 4f       	sbci	r31, 0xFE	; 254
 126:	80 81       	ld	r24, Z
 128:	a9 01       	movw	r20, r18
 12a:	44 0f       	add	r20, r20
 12c:	55 1f       	adc	r21, r21
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <check_eligibility+0x20>
 132:	95 95       	asr	r25
 134:	87 95       	ror	r24
 136:	4a 95       	dec	r20
 138:	e2 f7       	brpl	.-8      	; 0x132 <check_eligibility+0x1c>
 13a:	c8 2b       	or	r28, r24
	PCMSK1 |= (1 << PINC6) || (1<<PINC7);   // set pin C 6 & 7 to trigger an interrupt on state change
	sei();
}
int check_eligibility(){
	uint8_t temp = 0;
	for(int i = 0; i < 4; i++){
 13c:	2f 5f       	subi	r18, 0xFF	; 255
 13e:	3f 4f       	sbci	r19, 0xFF	; 255
 140:	24 30       	cpi	r18, 0x04	; 4
 142:	31 05       	cpc	r19, r1
 144:	6c f3       	brlt	.-38     	; 0x120 <check_eligibility+0xa>
		temp |= (prev_states[i] >> (2*i));
	}
	if (temp == legalMove1){
 146:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <legalMove1>
 14a:	c8 13       	cpse	r28, r24
 14c:	01 c0       	rjmp	.+2      	; 0x150 <check_eligibility+0x3a>
		den();
 14e:	b9 df       	rcall	.-142    	; 0xc2 <den>
	}
	if(temp == legalMove2){
 150:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <legalMove2>
 154:	c8 13       	cpse	r28, r24
		wild();
 156:	01 c0       	rjmp	.+2      	; 0x15a <check_eligibility+0x44>
 158:	aa df       	rcall	.-172    	; 0xae <wild>
	}
}
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <__vector_5>:
ISR (PCINT1_vect){
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	0b b6       	in	r0, 0x3b	; 59
 16a:	0f 92       	push	r0
 16c:	2f 93       	push	r18
 16e:	3f 93       	push	r19
 170:	4f 93       	push	r20
 172:	5f 93       	push	r21
 174:	6f 93       	push	r22
 176:	7f 93       	push	r23
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
 17c:	af 93       	push	r26
 17e:	bf 93       	push	r27
 180:	cf 93       	push	r28
 182:	ef 93       	push	r30
 184:	ff 93       	push	r31
	
	uint8_t pins = PINC;
 186:	c6 b1       	in	r28, 0x06	; 6
	pins = (pins >> 6);
 188:	c2 95       	swap	r28
 18a:	c6 95       	lsr	r28
 18c:	c6 95       	lsr	r28
 18e:	c3 70       	andi	r28, 0x03	; 3
	if(pins == 0){
 190:	09 f4       	brne	.+2      	; 0x194 <__vector_5+0x36>
		check_eligibility();
 192:	c1 df       	rcall	.-126    	; 0x116 <check_eligibility>
	}
	if(temp == legalMove2){
		wild();
	}
}
ISR (PCINT1_vect){
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0c c0       	rjmp	.+24     	; 0x1b2 <__vector_5+0x54>
	pins = (pins >> 6);
	if(pins == 0){
		check_eligibility();
	}
	for(int i = 0; i < 3; i++){
		prev_states[i] = prev_states[i+1];
 19a:	9c 01       	movw	r18, r24
 19c:	2f 5f       	subi	r18, 0xFF	; 255
 19e:	3f 4f       	sbci	r19, 0xFF	; 255
 1a0:	f9 01       	movw	r30, r18
 1a2:	ed 5f       	subi	r30, 0xFD	; 253
 1a4:	fe 4f       	sbci	r31, 0xFE	; 254
 1a6:	40 81       	ld	r20, Z
 1a8:	fc 01       	movw	r30, r24
 1aa:	ed 5f       	subi	r30, 0xFD	; 253
 1ac:	fe 4f       	sbci	r31, 0xFE	; 254
 1ae:	40 83       	st	Z, r20
	uint8_t pins = PINC;
	pins = (pins >> 6);
	if(pins == 0){
		check_eligibility();
	}
	for(int i = 0; i < 3; i++){
 1b0:	c9 01       	movw	r24, r18
 1b2:	83 30       	cpi	r24, 0x03	; 3
 1b4:	91 05       	cpc	r25, r1
 1b6:	8c f3       	brlt	.-30     	; 0x19a <__vector_5+0x3c>
		prev_states[i] = prev_states[i+1];
	}
	pins = (pins << 6);
 1b8:	c2 95       	swap	r28
 1ba:	cc 0f       	add	r28, r28
 1bc:	cc 0f       	add	r28, r28
 1be:	c0 7c       	andi	r28, 0xC0	; 192
	prev_states[3] = pins;
 1c0:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <prev_states+0x3>
}
 1c4:	ff 91       	pop	r31
 1c6:	ef 91       	pop	r30
 1c8:	cf 91       	pop	r28
 1ca:	bf 91       	pop	r27
 1cc:	af 91       	pop	r26
 1ce:	9f 91       	pop	r25
 1d0:	8f 91       	pop	r24
 1d2:	7f 91       	pop	r23
 1d4:	6f 91       	pop	r22
 1d6:	5f 91       	pop	r21
 1d8:	4f 91       	pop	r20
 1da:	3f 91       	pop	r19
 1dc:	2f 91       	pop	r18
 1de:	0f 90       	pop	r0
 1e0:	0b be       	out	0x3b, r0	; 59
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <main>:


int main(void)
{
    /* Replace with your application code */
	counter = 0;
 1ec:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	sensor_init();
 1f4:	70 df       	rcall	.-288    	; 0xd6 <sensor_init>
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <main+0xa>

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
